---
title: "Alcohol Analysis"
format: html
date: "Oct 16, 2023"
author: "Catalina Canizares"
editor_options: 
  chunk_output_type: console
---


```{r}
library(tidymodels)
library(tidyverse)
library(dissertationData)
library(gtsummary)
library(mice)
library(hardhat)

```

```{r}
data("clean_yrbs_2021")

```

```{r}
analysis <-
  clean_yrbs_2021 |>
  select(-c(
    Weight, DrivingDrinking, CurrentlySmokingCigarette,
    StoreSourceVaping, CurrentlySmokingCigar, CurrentlyBingeDrinking,
    UseCondom, NoFruitJuice, NoSalad, NoCarrots, NoSoda, NoBreakfast,
    HIVTested, DentistVisit, NoSportsDrinks, ExcerciseMuscles, Height,
    SexofSexualContact, DrinkingDriver, TextingDriving,
    MoreThan10CigPerDay, CurrentlyUseMarihuana, Sex4OrMorePartners,
    AlcoholOrDrugsSex, BirthControl, WeightLoss, NoFruit,
    NoPotatoes, NoOtherVeggies, NoMilk, PhysicalActivity,
    AttendedPEClass, STDTested, NoDrinksWater, Sunburn,
    EnglishProficiency, CurrentlySmokelessTobacco, MoreThan10Drinks,
    FirstAlcoholBefore13, SexBefore13, SexuallyActive, EverHadSex,
    FirstMarihuanaBefore13, SuicideInjuryMedicalAttention
  ))

saveRDS(analysis, "outputs/analysis.rds")
```


# Multiple Imputation 

```{r}
md.pattern(analysis$CurrentlyAlcohol)
```

```{r}
ini <- mice(analysis, maxit=0)
meth <- ini$method
meth["CurrentlyAlcohol"] <- "logreg" #logreg' is for binary data

imputed_data <- mice(analysis, method=meth, m=5) # m=5 creates 5 imputed datasets

complete_data_cr <-complete(imputed_data, "long")
saveRDS(complete_data_cr, "imputed_data.rds")
```

# Demographic table

The table presents demographic insights into current alcohol consumption among a group. Out of those surveyed, 27% of females and 19% of males indicated they currently consume alcohol. In terms of racial breakdown, the highest alcohol consumption rates were observed among the American Indian/Alaska Native demographic at 32%, while the lowest was among Asians at 11%. Regarding sexual orientation, bisexual respondents had the highest alcohol consumption rate at 32%. Conversely, heterosexual respondents showed a rate of 22%. When looking at grade levels, 12th graders reported the highest alcohol consumption at 32%, with 9th graders having the lowest rate at 15%.

```{r}
imputed_data <- 
  readRDS("imputed_data.rds")
```


```{r}
# This options worked to fix the warning: "Stratum (103) has only one
#  PSU at stage 1"
options(survey.adjust.domain.lonely = TRUE)
options(survey.lonely.psu = "adjust")


alcohol_use_demographics <-
  imputed_data |>
   filter(.imp == 1) |> 
  mutate(CurrentlyAlcohol = case_when(
    CurrentlyAlcohol == 0 ~ "No",
    CurrentlyAlcohol == 1 ~ "Yes"
  )) |>
  mutate(Grade = factor(Grade, levels = c("9", "10", "11", "12"))) |>
  mutate(CurrentlyAlcohol = factor(CurrentlyAlcohol, levels = c("Yes", "No")))


alcohol_use_demographics_srv <- 
survey::svydesign(
  data = alcohol_use_demographics,
  ids = ~psu,
  weights = ~weight,
  strata = ~stratum,
  nest = TRUE
) 

tbl_svysummary(
    data = alcohol_use_demographics_srv,
    include = c(Sex, Race, SexOrientation, Grade),
    sort = c(SexOrientation, Race) ~ "frequency", 
    by = CurrentlyAlcohol, 
    percent = "row") |>
  modify_caption("Demographic Breakdown of Current Alcohol Use: 
                 Based on 2021 YRBS Data") |>
  bold_labels()
```
             
# The tree

## The data
```{r}
imputed_analysis <- 
  imputed_data |> 
  mutate(case_wts = hardhat::importance_weights(weight)) |> 
  filter(.imp == 1) |> 
  select(- c(".imp", ".id", stratum, psu, weight, 
             EverTriedVaping))  
```

### Separating 75-25

```{r}
set.seed(123)

analysis_split <- 
   initial_split(imputed_analysis, 
                 strata = CurrentlyAlcohol)

analysis_train <- training(analysis_split)
analysis_test <- testing(analysis_split)

# analysis_split
# 64619/21541/86160

```


```{r}
library(janitor)

analysis_train |> 
  tabyl(CurrentlyAlcohol)  |> 
  adorn_pct_formatting(0) |> 
  adorn_totals()

analysis_test |> 
  tabyl(CurrentlyAlcohol)  |> 
  adorn_pct_formatting(0) |> 
  adorn_totals()

# 77% No use
# 23$ use
```



```{r}
set.seed(1234)

analysis_folds <- vfold_cv(analysis_train, v = 5)
analysis_folds

```


```{r}
library(rpart.plot)
library(vip)
library(themis)


cart_recipe <- 
  recipe(formula = CurrentlyAlcohol ~ ., data = analysis_train) |> 
  step_downsample(CurrentlyAlcohol)
  
cart_model <- 
  decision_tree(
    cost_complexity = tune(), 
    tree_depth = tune(),
    min_n = tune()) |> 
  set_engine("rpart") |> 
  set_mode("classification")


cart_workflow <- 
  workflow() |> 
  add_recipe(cart_recipe) |> 
  add_model(cart_model) |> 
  add_case_weights(case_wts)

```

```{r}
tree_grid <- 
  grid_regular(cost_complexity(),
               tree_depth(c(3,5)),
               min_n(), 
               levels = 4)
```


```{r}

doParallel::registerDoParallel()

set.seed(12345)

cart_tune <-
  cart_workflow |>
  tune_grid(
    resamples = analysis_folds,
    grid = tree_grid,
    control = control_grid(save_pred = TRUE),
    metrics = metric_set(accuracy, roc_auc, sensitivity, specificity))

doParallel::stopImplicitCluster()

saveRDS(cart_tune, "outputs/tune.rds")
cart_tune <- readRDS("outputs/tune.rds")

```

```{r}
show_best(cart_tune, metric = "roc_auc")
autoplot(cart_tune)

simpler_tree <- select_best(cart_tune, metric = "roc_auc")
```



```{r}
cart_final_wf <- 
  finalize_workflow(
    cart_workflow, simpler_tree)
```


```{r}
cart_fit <- 
  fit(cart_final_wf, analysis_train)

cart_fit

saveRDS(cart_fit, "outputs/cart_fit.rds")
```

```{r}
cart_fit <- 
  readRDS(here::here("outputs", "cart_fit.rds"))

tree_pred <- 
  augment(cart_fit, analysis_train) |> 
  select(CurrentlyAlcohol, .pred_class, .pred_1, .pred_0)

tree_pred
```

```{r}
roc_tree <- 
  tree_pred |> 
  roc_curve(truth = CurrentlyAlcohol, 
           .pred_1, 
           event_level = "second") |> 
  autoplot()


tree_pred |> 
  roc_auc(truth = CurrentlyAlcohol, 
           .pred_1, 
           event_level = "second")

multi_metric <- 
  metric_set(
    sensitivity, 
    specificity, 
    accuracy)

metrics <- 
  multi_metric(
    tree_pred, 
    truth = CurrentlyAlcohol, 
    estimate = .pred_class, 
    event_level = "second")

saveRDS(metrics, "outputs/metrics.rds")

```

```{r}

cart_fit |> 
  extract_fit_engine() |> 
   rpart.plot::rpart.plot::rpart.plot(roundint = FALSE)


```


In a study involving 6036 adolescents, current alcohol use was examined in relation to various behavioral and demographic factors. A significant predictor of alcohol consumption was found to be vaping habits. Specifically, a substantial 87.5% of those who are currently vaping also consume alcohol. Conversely, among those not engaged in vaping, 68.9% abstain from alcohol. Further insights emerge when considering marijuana use. Among non-vapers, those who have never used marijuana predominantly abstain from alcohol, with a notable 77.2% not consuming. In contrast, 65.1% of non-vapers who have experimented with marijuana also consume alcohol. Pain medicine usage further refines this picture. Adolescents who neither vape nor use marijuana but have taken pain medicine show varied alcohol consumption based on their racial backgrounds. For instance, among this group, a significant 55.9% of individuals identifying as Black, Hispanic, or Multiple Non-Hispanic reported alcohol use. Interestingly, feelings of hopelessness and gender also play a role. Within a subset of non-vapers who have used marijuana and belong to specific racial groups, those experiencing feelings of hopelessness had a higher tendency, 62.1%, to consume alcohol. Furthermore, among adolescents not feeling hopeless in this subset, a gender divide is evident: 70.2% of males abstain from alcohol, whereas 52.6% of females consume it. In conclusion, while vaping and marijuana usage emerge as strong predictors of alcohol consumption in adolescents, other factors like pain medicine use, race, emotional state, and gender provide a more nuanced understanding of alcohol use patterns in this demographic.


```{r}
last_fit <- 
  last_fit(cart_final_wf, 
           split = analysis_split, 
           metrics = metric_set(roc_auc, sens, yardstick::spec))

collect_metrics(last_fit, event_level = "second")
  
```

